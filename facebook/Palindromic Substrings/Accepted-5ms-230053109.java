// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Palindromic Substrings
// https://leetcode.com/problems/palindromic-substrings/
// 

class Solution {
 /* assume boolean array f[i][j] represents if substring from ith to jth characters is a palindrome or not. Then we can get the transition function:
f[i][j] = f[i + 1][j - 1], when s[i] == s[j].
when i + 1 > j - 1, it is also valid.
We simply count the palindromes on the fly and return in the end.
*/
    public int countSubstrings(String s) {
        int count = 0;
        int N = s.length();
        boolean[][] f = new boolean[N][N];
        
        for (int i = N - 1; i >= 0; i--) {
            f[i][i] = true;
            count++;
            for (int j = i + 1; j < N; ++j) {
                if (s.charAt(i) == s.charAt(j)) {
                    if (f[i + 1][j - 1] || i + 1 > j - 1) {
                        f[i][j] = true;
                        count++;
                    }
                } 
            }
        }
        return count;
    }
}

