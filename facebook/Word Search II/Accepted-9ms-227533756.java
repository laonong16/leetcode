// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Word Search II
// https://leetcode.com/problems/word-search-ii/
// 

class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        Trie root = buildTrie(words);
        List<String> result = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                dfs(board, i, j,root, result);
            }
        }
        return result;
    }
    public void dfs (char[][] board, int row, int col,Trie node, List<String> result) {
        char ch = board[row][col];
        int index = ch - 'a';
        if(ch == '#' || node.children[index] == null) return;
        node = node.children[index];
     
        if(node.word != null) {
            result.add(node.word);
            node.word = null;
        }
      
        board[row][col] = '#';
        if (row > 0) {
            dfs(board, row-1, col, node,result);
        } 
        if (row < board.length - 1) {
            dfs(board, row+1, col, node,result);
        } 
        if (col > 0) {
            dfs(board, row, col-1, node,result);
        } 
        if (col < board[0].length - 1) {
            dfs(board, row, col+1, node,result);
        }
        board[row][col] = ch;
    }
   
    public Trie buildTrie(String[] words) {
        Trie root = new Trie();
        for (String word : words){
            Trie node = root;
            for(char ch : word.toCharArray()) {
                int index = ch - 'a';
                if(node.children[index] == null) {
                    node.children[index] = new Trie();
                }
                node = node.children[index];
            }
            node.word = word;
        }
        return root;
    }


}
 public class Trie {
        String word;
        Trie[] children;
        public Trie(){
            this.children = new Trie[26];
        }
    }

