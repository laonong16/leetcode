// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Arithmetic Slices II - Subsequence
// https://leetcode.com/problems/arithmetic-slices-ii-subsequence/
// 

class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        int n=A.length;
        ArrayList<HashMap<Integer,Integer>>dp=new ArrayList<HashMap<Integer,Integer>>(n);
        int result=0;
        for(int i=0;i<n;i++){
            dp.add(i,new HashMap<Integer,Integer>());
            for(int j=0;j<i;j++){
                long temp=(long)A[i]-A[j];
                if(temp>Integer.MAX_VALUE||temp<Integer.MIN_VALUE)
                    continue;
                int diff=(int)temp;
                HashMap<Integer,Integer> mapi=dp.get(i);
                HashMap<Integer,Integer>mapj=dp.get(j);
                if(mapi.get(diff)==null)
                    mapi.put(diff,0);
                mapi.put(diff,mapi.get(diff)+1);
                if(mapj.get(diff)!=null){
                    mapi.put(diff,mapi.get(diff)+mapj.get(diff));
                    result+=mapj.get(diff);
                }
            }
        }
        return result;  
    }
}

