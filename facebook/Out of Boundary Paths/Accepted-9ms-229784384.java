// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Out of Boundary Paths
// https://leetcode.com/problems/out-of-boundary-paths/
// 

class Solution {
    public int findPaths(int m, int n, int N, int i, int j) {
         int M = 1000000000 + 7;
        int dp[][] = new int[m][n];
        dp[i][j] = 1;
        int count = 0;
        for (int moves = 1; moves <= N; moves++) {
            int[][] temp = new int[m][n];
            for (int r = 0; r < m; r++) {
                for (int c = 0; c < n; c++) {
                    if (r == m - 1)
                        count = (count + dp[r][c]) % M;
                    if (c == n - 1)
                        count = (count + dp[r][c]) % M;
                    if (r == 0)
                        count = (count + dp[r][c]) % M;
                    if (c == 0)
                        count = (count + dp[r][c]) % M;
                    temp[r][c] = (((r > 0 ? dp[r - 1][c] : 0) + (r < m - 1 ? dp[r + 1][c] : 0)) % M + ((c > 0 ? dp[r][c - 1] : 0) + (c < n - 1 ? dp[r][c + 1] : 0)) % M) % M;
                }
            }
            dp = temp;
        }
        return count;
    }
}

