// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Guess the Word
// https://leetcode.com/problems/guess-the-word/
// 

/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface Master {
 *     public int guess(String word) {}
 * }
 */
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
     int guess = -1;
        List<String> workList = new ArrayList();
        //sort word list for better guess + put it in a List
        Arrays.sort(wordlist);
        for(int i =0; i < wordlist.length; i ++){
            workList.add(wordlist[i]);
        }
        //If the worklist is empty we dont need to do anything, else we can directly get the one at 0 (being the first)
        if(!workList.isEmpty()) {
            //We try 10 times, however we stop once we have guess = 6 (Because it's bingo)
            for(int i =0; i < 10 && guess!=6; i ++){
                //get the score of the first element
                guess = master.guess(workList.get(0));         
                //update the worklist by filtering it to only possible candidates
                workList = getLeftCandidates(workList, workList.get(0), guess);
            }   
        }
    }
    
    //to filter we make sure that the score we currently got matches with the elements remaining, since the master is comparing it with the secret word, we only want to keep the elements that are possible candidates to be the secret word. Helper method characterScore is used to identify the score (as per the description of the problem)
    private List getLeftCandidates(List<String> wordList, String str, int guess){
        List<String> toReturn = new ArrayList();
        for(String word: wordList){            
            if(characterScore(word,str)==guess){
                toReturn.add(word);
            }
        }
        return toReturn;
    }
    
    //Simple method, with for loop to 6 (since length is known) count the number of character matching on value and position, that between two words. Will be used with the word we got the guess score from master of and the words we are trying to filter
    private int characterScore(String word1, String word2){
        int count = 0; 
        for(int i=0;i<6;i++){
            if(word1.charAt(i)==word2.charAt(i)){
                count ++;
            }
        }
        return count;
    }
}

