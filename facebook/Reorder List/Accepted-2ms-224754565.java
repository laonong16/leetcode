// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Reorder List
// https://leetcode.com/problems/reorder-list/
// 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
      if(head == null)
            return;
        ListNode slow = head, fast = head;
        LinkedList<ListNode> stk = new LinkedList<>();
      //Detect the cutting node by slow-fast-runner
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
      //Cut the list, push the second part into stack
        ListNode toInsert = slow.next;
        slow.next = null;
        while(toInsert != null){
            stk.push(toInsert);
            toInsert = toInsert.next;
        }
        slow = head;
        fast = slow.next;
      //Insert nodes of second part into first part at every interval between two nodes.
        while(!stk.isEmpty()){
            slow.next = stk.pop();
            slow.next.next = fast;
            slow = fast;
            fast = slow.next;
        }   
    }
}

