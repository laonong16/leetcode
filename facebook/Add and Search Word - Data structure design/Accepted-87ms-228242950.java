// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Add and Search Word - Data structure design
// https://leetcode.com/problems/add-and-search-word-data-structure-design/
// 

class WordDictionary {
    Trie root;
    Set<String> dictionary;
    /** Initialize your data structure here. */
    public WordDictionary() {
        this.root = new Trie();
        this.dictionary = new HashSet<>();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        if(!dictionary.contains(word)) {
          Trie node = root;
        for(char ch : word.toCharArray()) {
            int index = ch -'a';
            if(node.children[index] == null) {
                node.children[index] = new Trie();
            }
            node = node.children[index];
        }
        node.isWord = true; 
            dictionary.add(word);
        }
        
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        if(dictionary.contains(word)) {
            return true;
        }
        return dfs(word, 0, root);
    }
    private boolean dfs(String word, int index, Trie node) {
        if (index== word.length()) {
            return node.isWord;
        }
        char ch = word.charAt(index);
        Trie[] children = node.children;
        if (ch == '.') {        
            for (Trie cur: children) {
                if (cur != null) {
                    if (dfs(word, index+1, cur)) {
                        return true;
                    }
                }
            }
          
        } else {
            int chInd = ch - 'a';
            if (children[chInd] != null) {
                return dfs(word, index+1, children[chInd]);
            }
        }
        return false;
    }
}
public class Trie {
    boolean isWord;
    Trie[] children;
    public Trie() {
        this.children = new Trie[26];
    }
    public void insert(String word) {
        if (word == null || word.length() == 0) {
            return;
        }
        Trie node = this;
        for (char ch : word.toCharArray()) {
          
            int index = ch - 'a';
            if(node.children[index] == null) {
                node.children[index] = new Trie();
            }
            node = node.children[index];
        }
        this.isWord = true;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */

