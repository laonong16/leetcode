// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Find K Closest Elements
// https://leetcode.com/problems/find-k-closest-elements/
// 

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
     List<Integer> res = new ArrayList<>();
        if (arr == null || arr.length == 0) return res;
        int left = findLastEqualOrSmaller(arr, x);
        int right = left + 1;
        for (int i = 0; i < k; i++) {
            if (right >= arr.length || (left >= 0 && (Math.abs(arr[left] - x) <= Math.abs(arr[right] - x)))) {
                left--;
            } else {
                right++;
            }
        }
        for (int i = left + 1; i < right; i++) {
            res.add(arr[i]);
        }
        return res;
    }
    public int findLastEqualOrSmaller(int[] array, int x) {
        int start = 0;
        int end = array.length - 1;
        int mid;
        while (start + 1 < end) {
            mid = start + (end - start) / 2;
            if (array[mid] == x) {
                start = mid;
            } else if (array[mid] < x) {
                start = mid;
            } else {
                end = mid;
            }
        }
        if (array[end] <= x) {
            return end;
        } else {
            return start;
        }
    }
}

