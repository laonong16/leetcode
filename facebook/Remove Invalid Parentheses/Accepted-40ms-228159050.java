// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Remove Invalid Parentheses
// https://leetcode.com/problems/remove-invalid-parentheses/
// 

class Solution {
    public List<String> removeInvalidParentheses(String s) {
        //BFS 
        boolean find = false;
        Queue<String> que = new LinkedList<>();
        List<String> result = new ArrayList<>();
        Set<String> visited = new HashSet<>();
        que.offer(s);
        while (!que.isEmpty()) {
            String cur = que.poll();
            if (isValid(cur)) {
                result.add(cur);
                find = true;
                if(que.isEmpty()) return result;
            }
             if(!find){
                for (int i = 0; i < cur.length(); i++) {
                    char ch = cur.charAt(i);
                    if (ch == '(' || ch == ')') {
                        if( i < cur.length()  - 1 && cur.charAt(i) == cur.charAt(i+1)) {
                            continue;
                        }
                        String curSt = cur.substring(0, i) + cur.substring(i+1);
                        if (visited.add(curSt)) {
                             que.offer(curSt);
                        }
                       
                    }
                }
            }
        }
        return result;
    }
   boolean isValid(String s) {
        int len = s.length();
        int l = 0;
        for (int i = 0; i < len; i ++) {
            if (s.charAt(i) == '(') {
                l ++;
            }
            else if (s.charAt(i) == ')'){
                l --;
            }
            if (l < 0) {
                return false;
            }
        }
        return l == 0;
    }
}

