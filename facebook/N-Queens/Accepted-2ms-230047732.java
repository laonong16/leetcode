// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// N-Queens
// https://leetcode.com/problems/n-queens/
// 

class Solution {
   private static final char DOT = '.';
    private static final char Q = 'Q';
    private boolean[][] qLocation;
    private boolean[][] diagFlag;
    private boolean[] colFlag;
    public List<List<String>> solveNQueens(int n) {
        qLocation = new boolean[n][n];
        colFlag = new boolean[n];
        diagFlag = new boolean[2][2 * n - 1];
        List<List<String>> res = new ArrayList<>();
        helperSolveNQueens(0, n, res);
        return res;
    }


    private void helperSolveNQueens (int start, int n, List<List<String>> res) {

        if (start == n) {
            List<String> board = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < n; j++) {
                    if (qLocation[i][j]) {
                        sb.append(Q);
                    } else {
                        sb.append(DOT);
                    }
                }
                board.add(sb.toString());
            }
            res.add(board);
            return;
        }

        for (int i = 0; i < n; i++) {
            int lDiagIdx = i + start;
            int rDiagIdx = n - 1 + i - start;
            if (colFlag[i] || diagFlag[0][lDiagIdx] || diagFlag[1][rDiagIdx]) {
                continue;
            }
            colFlag[i] = true;
            diagFlag[0][lDiagIdx] = true;
            diagFlag[1][rDiagIdx] = true;

            qLocation[start][i] = true;
            helperSolveNQueens(start + 1, n, res);
            qLocation[start][i] = false;

            colFlag[i] = false;
            diagFlag[0][lDiagIdx] = false;
            diagFlag[1][rDiagIdx] = false;
        }
    }
}

