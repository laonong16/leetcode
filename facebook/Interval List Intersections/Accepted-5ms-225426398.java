// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Interval List Intersections
// https://leetcode.com/problems/interval-list-intersections/
// 

class Solution {
    public int[][] intervalIntersection(int[][] A, int[][] B) {
        List<Interval> ans = new ArrayList<>();

        int i = 0;
        int j = 0;
        while (i < A.length && j < B.length) {
            Interval a = new Interval(A[i][0], A[i][1]);
            Interval b = new Interval(B[j][0], B[j][1]);

            // a: [a.start              a.end]
            // b:           [b.start          b.end]
            //              [start ...   end]
            int start = Math.max(a.start, b.start); // start of intersection
            int end = Math.min(a.end, b.end); // end of intersection

            if (start <= end)
                ans.add(new Interval(start, end));

            if (a.end < b.end) i++;
            else j++;
        }

        int[][] ret = new int[ans.size()][2];
        for (int k = 0; k < ans.size(); k++)
            ret[k] = new int[]{ans.get(k).start, ans.get(k).end};

        return ret;
    }
}

