// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Convert Binary Search Tree to Sorted Doubly Linked List
// https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/
// 

/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
    /*
    step1: inorder tranversal by recursion to connect the original BST
    step2: connect the head and tail to make it circular

    Tips: Using dummy node to handle corner case
*/
Node prev = null;
    public Node treeToDoublyList(Node root) {
   if (root == null) return null;
	Node dummy = new Node(0, null, null);
	prev = dummy;
	helper(root);
	//connect head and tail
	prev.right = dummy.right;
	dummy.right.left = prev;
	return dummy.right;
}

private void helper (Node cur) {
	if (cur == null) return;
	helper(cur.left);
	prev.right = cur;
	cur.left = prev;
	prev = cur;
	helper(cur.right);
}
}

