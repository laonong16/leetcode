// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Network Delay Time
// https://leetcode.com/problems/network-delay-time/
// 

class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
         Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] time : times) {
            graph.putIfAbsent(time[0], new ArrayList<int[]>());
            graph.get(time[0]).add(new int[]{time[1], time[2]});
        }
        Queue<Integer> queue = new ArrayDeque<>();
        int[] minTimes = new int[N + 1]; 
        Arrays.fill(minTimes, Integer.MAX_VALUE);
        minTimes[K] = 0; 
        queue.offer(K);
        int res = 0;
        while (!queue.isEmpty()) {
            int node = queue.poll();
            if (graph.containsKey(node)) {
                for (int[] edge : graph.get(node)) {
                   int value = minTimes[node] + edge[1]; 
                   if (value < minTimes[edge[0]]) {
                       minTimes[edge[0]] = value;
                       queue.offer(edge[0]);
                   } 
                }
            }
        }
        for (int i = 1; i <= N; i++) {
            if (minTimes[i] == Integer.MAX_VALUE) {
                return -1;
            }
            res = Math.max(res, minTimes[i]);
        }
        return res;
    }
}

