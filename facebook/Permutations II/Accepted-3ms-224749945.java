// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Permutations II
// https://leetcode.com/problems/permutations-ii/
// 

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
      List<List<Integer>> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return result;
        }
        Arrays.sort(nums);
        helper(nums, result, new ArrayList<Integer>(), new boolean[nums.length]);
        return result;
    }
    
    public void helper(int[] nums, List<List<Integer>> result, List<Integer> list, boolean[]visited) {
        if (list.size() == nums.length) {
            result.add(new ArrayList<>(list));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] || (i != 0 && nums[i] == nums[i-1] && visited[i-1])) continue; 
                list.add(nums[i]);
                visited[i] = true;
                helper(nums, result, list,visited);
                list.remove(list.size() - 1);
                visited[i] = false;
            
        }
    }
}

