// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Maximum Subarray
// https://leetcode.com/problems/maximum-subarray/
// 

class Solution {
    public int maxSubArray(int[] nums) {
        /*
        dp(i) : maxsub end with index i;
        dp(i) = dp(i-1) + nums[i] if dp(i-1) > 0;
        dp(i) = nums[i] else
        dp[0] = 0; 
        return max of dp(i) 
        */
        int max = nums[0];
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        for (int i = 1 ; i < nums.length; i++) {
            if(dp[i-1] > 0) {
                dp[i] = dp[i-1] + nums[i];
            } else {
                dp[i] = nums[i];
            }
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}

