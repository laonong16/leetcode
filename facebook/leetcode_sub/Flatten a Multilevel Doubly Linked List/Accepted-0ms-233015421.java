// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Flatten a Multilevel Doubly Linked List
// https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/
// 

/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;

    public Node() {}

    public Node(int _val,Node _prev,Node _next,Node _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/
class Solution {
    public Node flatten(Node head) {
      return HasChild(head, false); 
      
  }
 
public Node HasChild(Node head, boolean ischild){
           Node theNode=head;
           Node tail=head;
          // if it is a child set, return the tail. Otherwise normally return the head
        while(theNode!=null){
     
            if(theNode.child!=null)
           {    
                Node tmp=theNode.next;
             
                theNode.next=theNode.child;
                theNode.child=null;
                theNode.next.prev=theNode;
             
                Node childTail=HasChild(theNode.next, true);
             
                //if it is not the end of the node
                if(tmp!=null )
                {
                childTail.next=tmp;
                 tmp.prev=childTail;
                }
            }
             
            
            if(theNode.next==null)
                  tail=theNode;
            
              theNode=theNode.next;
        }
    
       if(ischild)
         return tail; 
       else
         return head;
           
    }
}

