// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Word Search
// https://leetcode.com/problems/word-search/
// 

class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || board[0].length == 0) {
            return false;
        }
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; i++) {
                if (dfs(board, i, j, word,0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

public boolean dfs(char[][] board, int row, int col, String word, int index, boolean[][] visited) {
    if (index == word.length()) {
        return true;
    }
    if (row < 0 || row >= board.length || col < 0 || col >= board[0].length || visited[row][col] ||word.charAt(index) != board[row][col]) {
        return false;
    }
    visited[row][col] = true;
    if (dfs(board,row-1, col, word, index+1, visited) ||dfs(board,row+1, col, word, index+1, visited)
       || dfs(board,row, col-1, word, index+1, visited) ||dfs(board,row, col+1, word, index+1, visited)) {
        return true;
    }
    visited[row][col] = false;
    return false;
}
}

