// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Course Schedule
// https://leetcode.com/problems/course-schedule/
// 

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (numCourses <= 1) {
            return true;
        }
        int[] indegrees = new int[numCourses];
        Map<Integer, List<Integer>> edges = new HashMap<>();
        int count = 0;
        for (int[] depends : prerequisites) {
            indegrees[depends[0]]++;
           
             if (!edges.containsKey(depends[1]))  edges.put(depends[1], new ArrayList());
            edges.get(depends[1]).add(depends[0]);
            
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) {
                queue.offer(i);
                
            }
        }
        while (!queue.isEmpty()) {
            int course = queue.poll();
            if(edges.containsKey(course)) {
                for (int cur : edges.get(course)) {
                indegrees[cur]--;
                if (indegrees[cur] == 0) {
                    queue.offer(cur);
                }
            }
            }
            
            count++;
        }
        
        return count == numCourses;
    }
}

