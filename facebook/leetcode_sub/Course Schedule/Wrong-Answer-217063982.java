// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Course Schedule
// https://leetcode.com/problems/course-schedule/
// 

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (numCourses <= 1) {
            return true;
        }
        int[] indegrees = new int[numCourses];
        Map<Integer, List<Integer>> edges = new HashMap<>();
        int count = 0;
        for (int[] depends : prerequisites) {
            indegrees[depends[0]]++;
           
            List<Integer> courses= edges.getOrDefault(depends[1], new ArrayList<>());
            courses.add(depends[0]);
            edges.put(depends[1], courses);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int num : indegrees) {
            if (num == 0) {
                queue.offer(num);
                count++;
            }
        }
        while (!queue.isEmpty()) {
            int course = queue.poll();
            List<Integer> list = edges.get(course);
            if (list == null) continue;
            for (int cur : list) {
                indegrees[cur]--;
                if (indegrees[cur] == 0) {
                    queue.offer(cur);
                    count++;
                }
            }
        }
        
        return count == numCourses;
    }
}

