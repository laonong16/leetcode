// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Reconstruct Itinerary
// https://leetcode.com/problems/reconstruct-itinerary/
// 

class Solution {
             HashMap<String, PriorityQueue<String>> map = new HashMap<String, PriorityQueue<String>>();

    public List<String> findItinerary(List<List<String>> tickets) {
	List<String> result = new ArrayList<String>();
 
	 
		for (List<String> ticket : tickets) {
			if (!map.containsKey(ticket.get(0))) {
				PriorityQueue<String> q = new PriorityQueue<String>();
				map.put(ticket.get(0), q);
			}
			map.get(ticket.get(0)).offer(ticket.get(1));
		}
 
		dfs("JFK",result);
		return result;
	}
 
	public void dfs(String s, List<String> result) {
		PriorityQueue<String> q = map.get(s);
        result.add(s);
		while (q != null && !q.isEmpty()) {
			dfs(q.poll(),result);
		}
 
		
    }
}

