// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Word Ladder
// https://leetcode.com/problems/word-ladder/
// 

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if (wordList == null || wordList.size() == 0 || !wordList.contains(endWord)) {
            return 0;
        }
        Queue<WordNode> queue = new LinkedList<>();
        queue.offer(new WordNode(beginWord));
        while (!queue.isEmpty()) {
            WordNode node = queue.poll();
            if(node.word.equals(endWord)) {
                return node.len;
            }
            char[] chars = node.word.toCharArray();
            for (int i = 0; i < chars.length; i++) {
                char orig = chars[i];
                for (char ch = 'a'; ch <= 'z'; ch++) {
                    chars[i] = ch;
                    String newWord = new String(chars);
                    if (wordList.contains(newWord) ) {
                        WordNode newNode = new WordNode(newWord);
                        newNode.len = node.len + 1;
                        queue.offer(newNode);
                        wordList.remove(newWord);
                    }
                }
                chars[i] = orig;
            }
        }
        return 0;
    }
    class WordNode {
        int len;
        String word;
        public WordNode(String word) {
            this.word = word;
            len = 1;
        }
    }
}

