// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Word Ladder
// https://leetcode.com/problems/word-ladder/
// 

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(!wordList.contains(endWord)) {
            return 0;
        }
        Queue<LadderNode> queue = new LinkedList<>();
        queue.offer(new LadderNode(beginWord, 1));
        while (!queue.isEmpty()) {
            LadderNode node = queue.poll();
            if (node.word.equals(endWord)) {
                return node.level;
            }
            char[] chars = node.word.toCharArray();
            for (int i = 0; i < chars.length; i++) {
               
                for (char ch = 'a'; ch <= 'z'; ch++) {
                     char origin = chars[i];
                    if(ch != origin)
                    chars[i] = ch;
                    String newWord = new String(chars);
                    if (wordList.contains(newWord)) {
                        wordList.remove(newWord);
                        LadderNode newNode = new LadderNode(newWord, node.level+1);
                        queue.offer(newNode);
                    }
                     chars[i] = origin;
                }
               
            }
        }
        return 0;
    }
    class LadderNode {
        String word;
        int level;
        public LadderNode(String word, int level) {
            this.word = word;
            this.level = level;
        }
    }
}

