// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Course Schedule II
// https://leetcode.com/problems/course-schedule-ii/
// 

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] result = new int[numCourses];
        int[] indegrees = new int[numCourses];
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] edge : prerequisites) {
            int start = edge[1];
            int end = edge[0];
            indegrees[end]++;
            if (!graph.containsKey(start)) {
                graph.put(start, new ArrayList<>());
            }
            graph.get(start).add(end);
        }
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0) {
                queue.offer(i);
            }
        }
        int count = 0;
        while (!queue.isEmpty()) {
            int course = queue.poll();
            result[count] = course;
            if (graph.containsKey(course)) {
                for (int end : graph.get(course)) {
                    indegrees[end]--;
                    if (indegrees[end] == 0) {
                        queue.offer(end);
                    }
                }
            }
            count++;
        }
        return result;
    }
}

