// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Robot Room Cleaner
// https://leetcode.com/problems/robot-room-cleaner/
// 

/**
 * // This is the robot's control interface.
 * // You should not implement it, or speculate about its implementation
 * interface Robot {
 *     // Returns true if the cell in front is open and robot moves into the cell.
 *     // Returns false if the cell in front is blocked and robot stays in the current cell.
 *     public boolean move();
 *
 *     // Robot will stay in the same cell after calling turnLeft/turnRight.
 *     // Each turn will be 90 degrees.
 *     public void turnLeft();
 *     public void turnRight();
 *
 *     // Clean the current cell.
 *     public void clean();
 * }
 */
class Solution {
    public void cleanRoom(Robot robot) {
      //set to track visited cells
        Set<String> visited = new HashSet<>();
        //directions vector
        int[][] directions = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}}; //up, right, down, left
        
        //starting to clean the room from cell with coordinates [0, 0] heading up (0)
        cleanRoom(robot, visited, 0, 0, directions, 0); 
    }
    
    public void cleanRoom(Robot robot, Set<String> visited, int x, int y, int[][] directions, int direction) {
        //adding cell coordinates to the visited
        visited.add(x + " " + y);
        
        robot.clean();
        
        //try to go current direction and then turn right 4 times (complete turn around 360 degrees)
        for(int i = direction; i < direction + 4; i++) { 
            int nextDirection = i % 4;
            
            //calculating coordinates for next potential cell to move to
            int nextX = x + directions[nextDirection][0];
            int nextY = y + directions[nextDirection][1];
            
            //if cell is not visited yet move there
            if (!visited.contains(nextX + " " + nextY) && robot.move()) {
                cleanRoom(robot, visited, nextX, nextY, directions, nextDirection);
                
                //move back after visitng all the path to the end
                moveBack(robot);
            }
            robot.turnRight();
        }   
    }
    
    //move to the previous cell in the path and turn around to head initial direction
    private void moveBack(Robot robot) {
        robot.turnRight();
        robot.turnRight();
        robot.move();
        robot.turnRight();
        robot.turnRight();
    }
}

