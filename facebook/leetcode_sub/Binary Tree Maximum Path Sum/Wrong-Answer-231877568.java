// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Binary Tree Maximum Path Sum
// https://leetcode.com/problems/binary-tree-maximum-path-sum/
// 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxPathSum(TreeNode root) {
        if (root == null) {
            return 0;
        }
         if (root.left == null && root.right == null) {
            return root.val;
        }
        int leftMax = maxPathSum(root.left);
        int rightMax = maxPathSum(root.right);
        int leftSingleMax =  maxSinglePath(root.left) + root.val;
        int rightSingleMax = maxSinglePath(root.right) + root.val;
        int curSingleMax = Math.max(leftSingleMax,rightSingleMax);
        int curMax = Math.max(curSingleMax, leftSingleMax + rightSingleMax - root.val);
        return Math.max(Math.max(curMax, leftMax),rightMax);
    }
    int maxSinglePath(TreeNode node) {
        if (node == null) {
            return 0;
        }
        if (node.left == null && node.right == null) {
            return node.val;
        }
        int left= maxSinglePath(node.left);
        int right = maxSinglePath(node.right);
        return node.val + Math.max(left,right);
    }
}

