// 
// Generated by fetch-leetcode-submission project on GitHub.
// https://github.com/gitzhou/fetch-leetcode-submission
// Contact Me: aaron67[AT]aaron67.cc
// 
// Path Sum IV
// https://leetcode.com/problems/path-sum-iv/
// 

class Solution {
    private int sum = 0;
    
    public int pathSum(int[] nums) {
        if (nums.length == 0) return 0;
        // key = level, pos pair, value = value
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            int key = num / 10;
            int value = num % 10;
            map.put(key, value);
        }
        if (!map.containsKey(11)) return 0;
        dfs(11, map, map.get(11));
        return sum;
    }
    
    private void dfs(int node, Map<Integer, Integer> map, int current) {
        List<Integer> childs = getChilds(node, map);
        if (childs.isEmpty()) {
            sum += current;
            return;
        }
        for (int key : childs) {
            dfs(key, map, current + map.get(key));
        }
    }
    
    private List<Integer> getChilds(int node, Map<Integer, Integer> map) {
        List<Integer> childs = new LinkedList<>();
        int childLevel = (node / 10) + 1;
        int parentPos = node % 10;
        // 1 -> 1, 2     2 -> 3, 4
        int childPos1 = parentPos * 2 - 1;
        int childPos2 = parentPos * 2;
        int key1 = childLevel * 10 + childPos1;
        int key2 = childLevel * 10 + childPos2;
        if (map.containsKey(key1)) childs.add(key1);
        if (map.containsKey(key2)) childs.add(key2);
        return childs;
    }
}

